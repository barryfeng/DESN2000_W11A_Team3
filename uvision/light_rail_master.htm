<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [C:\Users\BarryPC\OneDrive - UNSW\22 Year 2\YR2T2\DESN2000\02 PROJECT\DESN2000_W11A_Team3\uvision\light_rail_master.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image C:\Users\BarryPC\OneDrive - UNSW\22 Year 2\YR2T2\DESN2000\02 PROJECT\DESN2000_W11A_Team3\uvision\light_rail_master.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 894]: Last Updated: Thu Aug 06 01:12:52 2020
<BR><P>
<H3>Maximum Stack Usage =     131192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; hw_init &rArr; init_lcd &rArr; constant_labels &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[3]">Reset_Handler</a>
 <LI><a href="#[ae]">__user_initial_stackheap</a>
 <LI><a href="#[9f]">store</a>
 <LI><a href="#[a1]">view_vel</a>
 <LI><a href="#[a3]">view_vel_setpoint</a>
 <LI><a href="#[a5]">view_brake</a>
 <LI><a href="#[a7]">view_dms</a>
 <LI><a href="#[4]">Undef_Handler</a>
 <LI><a href="#[5]">SWI_Handler</a>
 <LI><a href="#[6]">PAbt_Handler</a>
 <LI><a href="#[7]">DAbt_Handler</a>
 <LI><a href="#[8]">IRQ_Handler</a>
 <LI><a href="#[9]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">Undef_Handler</a><BR>
 <LI><a href="#[5]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SWI_Handler</a><BR>
 <LI><a href="#[6]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">PAbt_Handler</a><BR>
 <LI><a href="#[7]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DAbt_Handler</a><BR>
 <LI><a href="#[8]">IRQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">IRQ_Handler</a><BR>
 <LI><a href="#[9]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">DAbt_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[9]">FIQ_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[8]">IRQ_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[6]">PAbt_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[5]">SWI_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[4]">Undef_Handler</a> from lpc2400.o(RESET) referenced from lpc2400.o(RESET)
 <LI><a href="#[c]">__main</a> from __main.o(!!!main) referenced from lpc2400.o(RESET)
 <LI><a href="#[b]">main</a> from master_controller.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
 <LI><a href="#[4a]">master_isr_handler</a> from system_timer.o(.text) referenced from system_timer.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[10]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[cc]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[11]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[13]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[ce]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[cf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[d0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[d1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[d2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[d3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[d4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[d5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[d8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[d9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[da]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[db]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[dc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[dd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[de]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[df]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[e0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[e2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[e3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[e4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[e5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[e]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[e6]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[15]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[17]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[e7]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[18]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[e8]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b0]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[1a]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[e9]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[1c]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>rand</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_location_id (via Veneer)
</UL>

<P><STRONG><a name="[ae]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2400.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e]"></a>hw_init</STRONG> (ARM, 40 bytes, Stack size 8 bytes, master_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = hw_init &rArr; init_lcd &rArr; constant_labels &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_vel_limit_data
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ultrasonic
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pwm
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_pll
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_adc
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>lr_init</STRONG> (ARM, 72 bytes, Stack size 8 bytes, master_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lr_init
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (ARM, 100 bytes, Stack size 131072 bytes, master_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 131192 + Unknown Stack Size
<LI>Call Chain = main &rArr; hw_init &rArr; init_lcd &rArr; constant_labels &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_master_isr
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_master_isr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_diag_code
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_diag_code
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_diag_conditions
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[33]"></a>init_controller</STRONG> (ARM, 204 bytes, Stack size 48 bytes, fixed_point_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = init_controller &rArr; f_to_q &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_to_q
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[47]"></a>step_controller</STRONG> (ARM, 192 bytes, Stack size 32 bytes, fixed_point_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = step_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[45]"></a>run_controller</STRONG> (ARM, 308 bytes, Stack size 40 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = run_controller &rArr; init_controller &rArr; f_to_q &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vel_limit_data
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dms_state
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_brake_state
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brake
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vel
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_brake
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pwm
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_location_id
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ultrasonic_data
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;step_controller
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_isr_handler
</UL>

<P><STRONG><a name="[25]"></a>init_vel_limit_data</STRONG> (ARM, 68 bytes, Stack size 0 bytes, speed_limit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[46]"></a>get_vel_limit_data</STRONG> (ARM, 20 bytes, Stack size 0 bytes, speed_limit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[1f]"></a>init_pll</STRONG> (ARM, 96 bytes, Stack size 0 bytes, system_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[20]"></a>init_adc</STRONG> (ARM, 104 bytes, Stack size 0 bytes, system_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[21]"></a>init_pwm</STRONG> (ARM, 176 bytes, Stack size 0 bytes, system_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[22]"></a>init_spi</STRONG> (ARM, 112 bytes, Stack size 0 bytes, system_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[24]"></a>init_ultrasonic</STRONG> (ARM, 108 bytes, Stack size 8 bytes, system_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = init_ultrasonic &rArr; init_timer2
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer2
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[3d]"></a>spi_write</STRONG> (ARM, 84 bytes, Stack size 0 bytes, system_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_block
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brake
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_brake
</UL>

<P><STRONG><a name="[53]"></a>spi_read</STRONG> (ARM, 76 bytes, Stack size 0 bytes, system_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_response
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_block
</UL>

<P><STRONG><a name="[4e]"></a>get_prescaler</STRONG> (ARM, 68 bytes, Stack size 0 bytes, system_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer3
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer2
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_master_isr
</UL>

<P><STRONG><a name="[4a]"></a>master_isr_handler</STRONG> (ARM, 52 bytes, Stack size 32 bytes, system_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = master_isr_handler &rArr; lcd_run &rArr; lcd_backlight_off &rArr; constant_velocity_off &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_press
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_timer.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>start_master_isr</STRONG> (ARM, 188 bytes, Stack size 8 bytes, system_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = start_master_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>stop_master_isr</STRONG> (ARM, 28 bytes, Stack size 0 bytes, system_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>init_timer2</STRONG> (ARM, 52 bytes, Stack size 4 bytes, system_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = init_timer2
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ultrasonic
</UL>

<P><STRONG><a name="[36]"></a>delay_timer2</STRONG> (ARM, 72 bytes, Stack size 0 bytes, system_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ultrasonic_data
</UL>

<P><STRONG><a name="[37]"></a>start_timer2_stopwatch</STRONG> (ARM, 16 bytes, Stack size 0 bytes, system_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ultrasonic_data
</UL>

<P><STRONG><a name="[38]"></a>split_timer2_stopwatch</STRONG> (ARM, 12 bytes, Stack size 0 bytes, system_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ultrasonic_data
</UL>

<P><STRONG><a name="[39]"></a>reset_timer2_stopwatch</STRONG> (ARM, 24 bytes, Stack size 0 bytes, system_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ultrasonic_data
</UL>

<P><STRONG><a name="[4f]"></a>init_timer3</STRONG> (ARM, 52 bytes, Stack size 4 bytes, system_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prescaler
</UL>

<P><STRONG><a name="[ea]"></a>delay_timer3</STRONG> (ARM, 72 bytes, Stack size 0 bytes, system_timer.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>load_diag_code</STRONG> (ARM, 140 bytes, Stack size 16 bytes, diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = load_diag_code &rArr; mmc_read_block &rArr; mmc_response
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>run_diag_code</STRONG> (ARM, 32 bytes, Stack size 16 bytes, diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = run_diag_code
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>check_diag_conditions</STRONG> (ARM, 80 bytes, Stack size 0 bytes, diagnostics.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>spi_read_block</STRONG> (ARM, 52 bytes, Stack size 16 bytes, diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_read_block
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
</UL>

<P><STRONG><a name="[54]"></a>spi_write_block</STRONG> (ARM, 52 bytes, Stack size 16 bytes, diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_write_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[55]"></a>mmc_response</STRONG> (ARM, 80 bytes, Stack size 16 bytes, spi_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmc_response
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[50]"></a>mmc_init</STRONG> (ARM, 544 bytes, Stack size 8 bytes, spi_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mmc_init &rArr; mmc_response
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_response
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_block
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_diag_code
</UL>

<P><STRONG><a name="[51]"></a>mmc_read_block</STRONG> (ARM, 256 bytes, Stack size 24 bytes, spi_mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mmc_read_block &rArr; mmc_response
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_response
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_block
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_block
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_diag_code
</UL>

<P><STRONG><a name="[7d]"></a>mdelay</STRONG> (ARM, 48 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdramInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTurnOn
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_init
</UL>

<P><STRONG><a name="[5b]"></a>inside_sd</STRONG> (ARM, 56 bytes, Stack size 0 bytes, button_press.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_button
</UL>

<P><STRONG><a name="[5a]"></a>inside_throttle_minus</STRONG> (ARM, 52 bytes, Stack size 0 bytes, button_press.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_button
</UL>

<P><STRONG><a name="[59]"></a>inside_throttle_plus</STRONG> (ARM, 52 bytes, Stack size 0 bytes, button_press.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_button
</UL>

<P><STRONG><a name="[58]"></a>inside_brake</STRONG> (ARM, 60 bytes, Stack size 4 bytes, button_press.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = inside_brake
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_button
</UL>

<P><STRONG><a name="[56]"></a>press_button</STRONG> (ARM, 296 bytes, Stack size 24 bytes, button_press.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = press_button &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_brake
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_throttle_plus
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_throttle_minus
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inside_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_press
</UL>

<P><STRONG><a name="[eb]"></a>touch_init</STRONG> (ARM, 112 bytes, Stack size 0 bytes, touch.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>touch_read_xy</STRONG> (ARM, 76 bytes, Stack size 24 bytes, touch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = touch_read_xy
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_press
</UL>

<P><STRONG><a name="[5e]"></a>pressure_calc</STRONG> (ARM, 152 bytes, Stack size 64 bytes, touch_screen_read.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pressure_calc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_press
</UL>

<P><STRONG><a name="[4b]"></a>touch_screen_press</STRONG> (ARM, 120 bytes, Stack size 32 bytes, touch_screen_read.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = touch_screen_press &rArr; pressure_calc &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_read_xy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_button
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_isr_handler
</UL>

<P><STRONG><a name="[66]"></a>lcd_point</STRONG> (ARM, 52 bytes, Stack size 0 bytes, lcd_grph.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putBrakeLabelChar
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putVelLabelChar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putVelChar
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putChar
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_line
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillScreen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hLine
</UL>

<P><STRONG><a name="[68]"></a>lcd_fillScreen</STRONG> (ARM, 88 bytes, Stack size 16 bytes, lcd_grph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_fillScreen
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[69]"></a>lcd_drawRect</STRONG> (ARM, 112 bytes, Stack size 24 bytes, lcd_grph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hLine
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_off
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_off
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_off
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_on
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_on
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_on
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_borders
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
</UL>

<P><STRONG><a name="[6a]"></a>lcd_fillRect</STRONG> (ARM, 184 bytes, Stack size 32 bytes, lcd_grph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_fillRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hLine
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_off
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_off
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_off
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_on
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_on
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_on
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_labels
</UL>

<P><STRONG><a name="[6b]"></a>lcd_line</STRONG> (ARM, 536 bytes, Stack size 64 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vLine
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hLine
</UL>

<P><STRONG><a name="[6c]"></a>lcd_circle</STRONG> (ARM, 1184 bytes, Stack size 100 bytes, lcd_grph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lcd_circle
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_off
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_on
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_on
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_on
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_on
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
</UL>

<P><STRONG><a name="[6d]"></a>lcd_fillcircle</STRONG> (ARM, 1772 bytes, Stack size 120 bytes, lcd_grph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hLine
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_off
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_on
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_on
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_on
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_on
</UL>

<P><STRONG><a name="[6e]"></a>lcd_putChar</STRONG> (ARM, 236 bytes, Stack size 32 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putString
</UL>

<P><STRONG><a name="[6f]"></a>lcd_putString</STRONG> (ARM, 88 bytes, Stack size 16 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putChar
</UL>

<P><STRONG><a name="[ec]"></a>lcd_fontColor</STRONG> (ARM, 20 bytes, Stack size 0 bytes, lcd_grph.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>lcd_picture</STRONG> (ARM, 104 bytes, Stack size 40 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[72]"></a>HSVtoRGB</STRONG> (ARM, 388 bytes, Stack size 48 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSVto16BIT
</UL>

<P><STRONG><a name="[73]"></a>HSVto16BIT</STRONG> (ARM, 104 bytes, Stack size 40 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSVtoRGB
</UL>

<P><STRONG><a name="[74]"></a>lcd_putVelChar</STRONG> (ARM, 244 bytes, Stack size 32 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putVelString
</UL>

<P><STRONG><a name="[75]"></a>lcd_putVelString</STRONG> (ARM, 88 bytes, Stack size 16 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putVelChar
</UL>

<P><STRONG><a name="[76]"></a>lcd_putVelLabelChar</STRONG> (ARM, 248 bytes, Stack size 32 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putVelLabelString
</UL>

<P><STRONG><a name="[77]"></a>lcd_putVelLabelString</STRONG> (ARM, 88 bytes, Stack size 16 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putVelLabelChar
</UL>

<P><STRONG><a name="[78]"></a>lcd_putBrakeLabelChar</STRONG> (ARM, 248 bytes, Stack size 32 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putBrakeLabelString
</UL>

<P><STRONG><a name="[79]"></a>lcd_putBrakeLabelString</STRONG> (ARM, 88 bytes, Stack size 16 bytes, lcd_grph.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_putBrakeLabelChar
</UL>

<P><STRONG><a name="[ed]"></a>lcdSetColorFormat</STRONG> (ARM, 92 bytes, Stack size 0 bytes, lcd_hw.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>lcdSetBacklight</STRONG> (ARM, 52 bytes, Stack size 8 bytes, lcd_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = lcdSetBacklight
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTurnOn
</UL>

<P><STRONG><a name="[ee]"></a>lcdSetBpp</STRONG> (ARM, 292 bytes, Stack size 0 bytes, lcd_hw.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>lcdTurnOn</STRONG> (ARM, 68 bytes, Stack size 8 bytes, lcd_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lcdTurnOn &rArr; lcd_display_init &rArr; writeToReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetBacklight
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[81]"></a>lcdInit</STRONG> (ARM, 48 bytes, Stack size 8 bytes, lcd_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = lcdInit &rArr; lcdSetBacklight
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetBacklight
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ctrl_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[84]"></a>lcd_rectangle_thickness</STRONG> (ARM, 112 bytes, Stack size 40 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_off
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_off
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_off
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_on
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_on
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_on
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_labels
</UL>

<P><STRONG><a name="[85]"></a>constant_labels</STRONG> (ARM, 396 bytes, Stack size 16 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constant_labels &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[86]"></a>constant_borders</STRONG> (ARM, 208 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = constant_borders &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[23]"></a>init_lcd</STRONG> (ARM, 44 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = init_lcd &rArr; constant_labels &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdramInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_borders
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_labels
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTurnOn
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_init
</UL>

<P><STRONG><a name="[88]"></a>lcd_circle_thickness</STRONG> (ARM, 80 bytes, Stack size 32 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lcd_circle_thickness &rArr; lcd_circle
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_off
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_on
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_on
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_on
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_on
</UL>

<P><STRONG><a name="[89]"></a>constant_max_vel_on</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_max_vel_on &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[8a]"></a>constant_max_vel_off</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_max_vel_off &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[8b]"></a>constant_dms_on</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_dms_on &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[8c]"></a>constant_dms_off</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_dms_off &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[8e]"></a>reverse_string</STRONG> (ARM, 64 bytes, Stack size 4 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = reverse_string
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integer_to_string
</UL>

<P><STRONG><a name="[8d]"></a>integer_to_string</STRONG> (ARM, 212 bytes, Stack size 32 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = integer_to_string &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverse_string
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[8f]"></a>constant_sd_on</STRONG> (ARM, 312 bytes, Stack size 24 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = constant_sd_on &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_on
</UL>

<P><STRONG><a name="[90]"></a>constant_brake_on</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_brake_on &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_on
</UL>

<P><STRONG><a name="[91]"></a>constant_stops_on</STRONG> (ARM, 268 bytes, Stack size 16 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constant_stops_on &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_on
</UL>

<P><STRONG><a name="[92]"></a>constant_throttle_minus_on</STRONG> (ARM, 168 bytes, Stack size 16 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constant_throttle_minus_on &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_on
</UL>

<P><STRONG><a name="[93]"></a>constant_throttle_plus_on</STRONG> (ARM, 196 bytes, Stack size 16 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constant_throttle_plus_on &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_on
</UL>

<P><STRONG><a name="[94]"></a>constant_velocity_on</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_velocity_on &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_on
</UL>

<P><STRONG><a name="[95]"></a>lcd_backlight_on</STRONG> (ARM, 36 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lcd_backlight_on &rArr; constant_velocity_on &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_on
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_on
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_on
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_on
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_on
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_on
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[96]"></a>constant_sd_off</STRONG> (ARM, 312 bytes, Stack size 24 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = constant_sd_off &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_off
</UL>

<P><STRONG><a name="[97]"></a>constant_brake_off</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_brake_off &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_off
</UL>

<P><STRONG><a name="[98]"></a>constant_stops_off</STRONG> (ARM, 268 bytes, Stack size 16 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constant_stops_off &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_off
</UL>

<P><STRONG><a name="[99]"></a>constant_throttle_minus_off</STRONG> (ARM, 168 bytes, Stack size 16 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constant_throttle_minus_off &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_off
</UL>

<P><STRONG><a name="[9a]"></a>constant_throttle_plus_off</STRONG> (ARM, 248 bytes, Stack size 16 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = constant_throttle_plus_off &rArr; lcd_rectangle_thickness &rArr; lcd_drawRect &rArr; vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_rectangle_thickness
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_off
</UL>

<P><STRONG><a name="[9b]"></a>constant_velocity_off</STRONG> (ARM, 108 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = constant_velocity_off &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle_thickness
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_off
</UL>

<P><STRONG><a name="[9c]"></a>lcd_backlight_off</STRONG> (ARM, 36 bytes, Stack size 8 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lcd_backlight_off &rArr; constant_velocity_off &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_velocity_off
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_plus_off
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_throttle_minus_off
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_stops_off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_brake_off
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_sd_off
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[4c]"></a>lcd_run</STRONG> (ARM, 440 bytes, Stack size 232 bytes, lcd_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lcd_run &rArr; lcd_backlight_off &rArr; constant_velocity_off &rArr; lcd_fillcircle &rArr; hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_off
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_backlight_on
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integer_to_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_dms_on
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_off
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constant_max_vel_on
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_isr_handler
</UL>

<P><STRONG><a name="[87]"></a>sdramInit</STRONG> (ARM, 472 bytes, Stack size 16 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdramInit
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_lcd
</UL>

<P><STRONG><a name="[4d]"></a>store_data</STRONG> (ARM, 52 bytes, Stack size 24 bytes, access_data.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = store_data
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;master_isr_handler
</UL>

<P><STRONG><a name="[a0]"></a>access_velocity</STRONG> (ARM, 24 bytes, Stack size 8 bytes, access_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_vel
</UL>

<P><STRONG><a name="[a2]"></a>access_velocity_setpoint</STRONG> (ARM, 24 bytes, Stack size 8 bytes, access_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_vel_setpoint
</UL>

<P><STRONG><a name="[a4]"></a>access_brake_state</STRONG> (ARM, 24 bytes, Stack size 8 bytes, access_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_brake
</UL>

<P><STRONG><a name="[a6]"></a>access_dms_state</STRONG> (ARM, 24 bytes, Stack size 8 bytes, access_data.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;view_dms
</UL>

<P><STRONG><a name="[a8]"></a>srand</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[14]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[9e]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run (via Veneer)
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_picture
</UL>

<P><STRONG><a name="[a9]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ef]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_controller
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_controller
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr_init
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;integer_to_string
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSVtoRGB
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;press_button
</UL>

<P><STRONG><a name="[f4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[aa]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[16]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[19]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[fb]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[fc]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[fd]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>__rt_fp_status_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ff]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdSetBacklight
</UL>

<P><STRONG><a name="[9f]"></a>store</STRONG> (ARM, 4 bytes, Stack size unknown bytes, data_management.o(store_data))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
</UL>

<P><STRONG><a name="[a1]"></a>view_vel</STRONG> (ARM, 4 bytes, Stack size unknown bytes, data_management.o(store_data), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_velocity
</UL>

<P><STRONG><a name="[a3]"></a>view_vel_setpoint</STRONG> (ARM, 4 bytes, Stack size unknown bytes, data_management.o(store_data), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_velocity_setpoint
</UL>

<P><STRONG><a name="[a5]"></a>view_brake</STRONG> (ARM, 4 bytes, Stack size unknown bytes, data_management.o(store_data), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_brake_state
</UL>

<P><STRONG><a name="[a7]"></a>view_dms</STRONG> (ARM, 4 bytes, Stack size unknown bytes, data_management.o(store_data), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;access_dms_state
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[b5]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
</UL>

<P><STRONG><a name="[b9]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[ba]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_d2uiz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
</UL>

<P><STRONG><a name="[bb]"></a>_dfixu</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[102]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[bd]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
</UL>

<P><STRONG><a name="[bc]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_run
</UL>

<P><STRONG><a name="[be]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b8]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b7]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pressure_calc
</UL>

<P><STRONG><a name="[bf]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c3]"></a>__fpl_fcmp_Inf</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_cfcmpeq</STRONG> (ARM, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_to_q
</UL>

<P><STRONG><a name="[c1]"></a>_fcmpeq</STRONG> (ARM, 132 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_f2uiz</STRONG> (ARM, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_to_q
</UL>

<P><STRONG><a name="[c4]"></a>_ffixu</STRONG> (ARM, 84 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_cfcmple</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_to_q
</UL>

<P><STRONG><a name="[c5]"></a>_fcmple</STRONG> (ARM, 132 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[ca]"></a>__fpl_fcmple_InfNaN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_fmul</STRONG> (ARM, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_to_q
</UL>

<P><STRONG><a name="[c6]"></a>_fmul</STRONG> (ARM, 256 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[c2]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[12]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[103]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[c7]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_cfrcmple</STRONG> (ARM, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_to_q
</UL>

<P><STRONG><a name="[c9]"></a>_frcmple</STRONG> (ARM, 124 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[104]"></a>__I$use$fp</STRONG> (ARM, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, lpc2400.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2400.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>f_to_q</STRONG> (ARM, 116 bytes, Stack size 16 bytes, fixed_point_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = f_to_q &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_controller
</UL>

<P><STRONG><a name="[3f]"></a>get_voltage</STRONG> (ARM, 112 bytes, Stack size 0 bytes, motion_controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vel
</UL>

<P><STRONG><a name="[35]"></a>get_ultrasonic_data</STRONG> (ARM, 276 bytes, Stack size 16 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ultrasonic_data
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer2_stopwatch
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;split_timer2_stopwatch
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer2_stopwatch
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_timer2
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[3a]"></a>get_location_id</STRONG> (ARM, 40 bytes, Stack size 8 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_location_id
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[48]"></a>set_pwm</STRONG> (ARM, 24 bytes, Stack size 0 bytes, motion_controller.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[3c]"></a>release_brake</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = release_brake
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_dms
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_brake_state
</UL>

<P><STRONG><a name="[3e]"></a>get_vel</STRONG> (ARM, 32 bytes, Stack size 16 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_vel
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[40]"></a>set_brake</STRONG> (ARM, 36 bytes, Stack size 8 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_brake
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dms
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_brake_state
</UL>

<P><STRONG><a name="[41]"></a>update_brake_state</STRONG> (ARM, 44 bytes, Stack size 8 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_brake_state &rArr; set_brake
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brake
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_brake
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[42]"></a>set_dms</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_dms &rArr; set_brake
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_brake
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dms_state
</UL>

<P><STRONG><a name="[43]"></a>reset_dms</STRONG> (ARM, 28 bytes, Stack size 8 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_dms &rArr; release_brake
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_brake
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_dms_state
</UL>

<P><STRONG><a name="[44]"></a>update_dms_state</STRONG> (ARM, 68 bytes, Stack size 16 bytes, motion_controller.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_dms_state &rArr; reset_dms &rArr; release_brake
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_dms
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dms
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_controller
</UL>

<P><STRONG><a name="[5d]"></a>touch_read</STRONG> (ARM, 136 bytes, Stack size 0 bytes, touch.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_read_xy
</UL>

<P><STRONG><a name="[65]"></a>hLine</STRONG> (ARM, 108 bytes, Stack size 24 bytes, lcd_grph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hLine
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillcircle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_line
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>

<P><STRONG><a name="[67]"></a>vLine</STRONG> (ARM, 84 bytes, Stack size 24 bytes, lcd_grph.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vLine
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_point
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_line
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_fillRect
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_drawRect
</UL>

<P><STRONG><a name="[7b]"></a>spiSend</STRONG> (ARM, 88 bytes, Stack size 0 bytes, lcd_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToReg
</UL>

<P><STRONG><a name="[7a]"></a>writeToReg</STRONG> (ARM, 156 bytes, Stack size 16 bytes, lcd_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = writeToReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_init
</UL>

<P><STRONG><a name="[82]"></a>lcd_hw_init</STRONG> (ARM, 364 bytes, Stack size 0 bytes, lcd_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>

<P><STRONG><a name="[7c]"></a>lcd_display_init</STRONG> (ARM, 500 bytes, Stack size 8 bytes, lcd_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lcd_display_init &rArr; writeToReg
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeToReg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdTurnOn
</UL>

<P><STRONG><a name="[83]"></a>lcd_ctrl_init</STRONG> (ARM, 692 bytes, Stack size 8 bytes, lcd_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_ctrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>

<P><STRONG><a name="[b3]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[b2]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[b1]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[b4]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[c0]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[b6]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[af]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
